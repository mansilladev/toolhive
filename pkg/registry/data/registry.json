{
  "last_updated": "2025-06-15 00:31:23",
  "servers": {
    "atlassian": {
      "args": [],
      "description": "Model Context Protocol (MCP) server for Atlassian products (Confluence and Jira). This integration supports both Confluence \u0026 Jira Cloud and Server/Data Center deployments.",
      "env_vars": [
        {
          "description": "Confluence URL (e.g., https://your-domain.atlassian.net/wiki)",
          "name": "CONFLUENCE_URL",
          "required": false
        },
        {
          "description": "Confluence username/email for Cloud deployments",
          "name": "CONFLUENCE_USERNAME",
          "required": false
        },
        {
          "description": "Confluence API token for Cloud deployments",
          "name": "CONFLUENCE_API_TOKEN",
          "required": false,
          "secret": true
        },
        {
          "description": "Confluence Personal Access Token for Server/Data Center deployments",
          "name": "CONFLUENCE_PERSONAL_TOKEN",
          "required": false,
          "secret": true
        },
        {
          "description": "Verify SSL certificates for Confluence Server/Data Center (true/false)",
          "name": "CONFLUENCE_SSL_VERIFY",
          "required": false
        },
        {
          "description": "Comma-separated list of Confluence space keys to filter search results",
          "name": "CONFLUENCE_SPACES_FILTER",
          "required": false
        },
        {
          "description": "Jira URL (e.g., https://your-domain.atlassian.net)",
          "name": "JIRA_URL",
          "required": false
        },
        {
          "description": "Jira username/email for Cloud deployments",
          "name": "JIRA_USERNAME",
          "required": false
        },
        {
          "description": "Jira API token for Cloud deployments",
          "name": "JIRA_API_TOKEN",
          "required": false,
          "secret": true
        },
        {
          "description": "Jira Personal Access Token for Server/Data Center deployments",
          "name": "JIRA_PERSONAL_TOKEN",
          "required": false,
          "secret": true
        },
        {
          "description": "Verify SSL certificates for Jira Server/Data Center (true/false)",
          "name": "JIRA_SSL_VERIFY",
          "required": false
        },
        {
          "description": "Comma-separated list of Jira project keys to filter search results",
          "name": "JIRA_PROJECTS_FILTER",
          "required": false
        },
        {
          "description": "Run in read-only mode (disables all write operations)",
          "name": "READ_ONLY_MODE",
          "required": false
        },
        {
          "description": "Increase logging verbosity",
          "name": "MCP_VERBOSE",
          "required": false
        }
      ],
      "image": "mcp/atlassian:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:18Z",
        "pulls": 6139,
        "stars": 1904
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              "atlassian.net",
              "atlassian.com"
            ],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/sooperset/mcp-atlassian",
      "tags": [
        "atlassian",
        "confluence",
        "jira",
        "wiki",
        "issue-tracking",
        "project-management",
        "documentation",
        "cloud",
        "server",
        "data-center"
      ],
      "tools": [
        "confluence_search",
        "confluence_get_page",
        "confluence_get_page_children",
        "confluence_get_page_ancestors",
        "confluence_get_comments",
        "confluence_create_page",
        "confluence_update_page",
        "confluence_delete_page",
        "confluence_attach_content",
        "jira_get_issue",
        "jira_search",
        "jira_get_project_issues",
        "jira_get_epic_issues",
        "jira_create_issue",
        "jira_update_issue",
        "jira_delete_issue",
        "jira_get_transitions",
        "jira_transition_issue",
        "jira_add_comment",
        "jira_add_worklog",
        "jira_get_worklog",
        "jira_download_attachments",
        "jira_link_to_epic",
        "jira_get_agile_boards",
        "jira_get_board_issues",
        "jira_get_sprints_from_board",
        "jira_get_sprint_issues"
      ],
      "transport": "stdio"
    },
    "aws-kb-retrieval-server": {
      "args": [],
      "description": "MCP server for retrieving information from the AWS Knowledge Base using the Bedrock Agent Runtime.",
      "env_vars": [
        {
          "description": "AWS access key ID for Bedrock Agent Runtime operations",
          "name": "AWS_ACCESS_KEY_ID",
          "required": true,
          "secret": true
        },
        {
          "description": "AWS secret access key for Bedrock Agent Runtime operations",
          "name": "AWS_SECRET_ACCESS_KEY",
          "required": true,
          "secret": true
        },
        {
          "description": "AWS region where the Knowledge Base is located",
          "name": "AWS_REGION",
          "required": true
        }
      ],
      "image": "mcp/aws-kb-retrieval-server:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:23Z",
        "pulls": 3527,
        "stars": 53720
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": true
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "agent",
        "aws",
        "aws-kb-retrieval-server",
        "base",
        "bedrock",
        "information",
        "knowledge",
        "retrieval",
        "retrieving",
        "runtime"
      ],
      "tools": [
        "retrieve_from_aws_kb"
      ],
      "transport": "stdio"
    },
    "brave-search": {
      "args": [],
      "description": "MCP server that integrates the Brave Search API, providing both web and local search capabilities.",
      "env_vars": [
        {
          "description": "Brave Search API key for web and local search capabilities",
          "name": "BRAVE_API_KEY",
          "required": true,
          "secret": true
        }
      ],
      "image": "mcp/brave-search:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:19Z",
        "pulls": 7188,
        "stars": 53720
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              "brave.com",
              "api.search.brave.com"
            ],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "api",
        "both",
        "brave",
        "brave-search",
        "brave_local_search",
        "capabilities",
        "execute",
        "integrates",
        "local",
        "providing"
      ],
      "tools": [
        "brave_web_search",
        "brave_local_search"
      ],
      "transport": "stdio"
    },
    "everart": {
      "args": [],
      "description": "Image generation server for Claude Desktop using EverArt's API.",
      "env_vars": [
        {
          "description": "EverArt API key for image generation",
          "name": "EVERART_API_KEY",
          "required": true,
          "secret": true
        }
      ],
      "image": "mcp/everart:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:23Z",
        "pulls": 6379,
        "stars": 53720
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "api",
        "claude",
        "desktop",
        "everart",
        "generation",
        "image",
        "tools",
        "using"
      ],
      "tools": [
        "generate_image"
      ],
      "transport": "stdio"
    },
    "everything": {
      "args": [],
      "description": "This MCP server attempts to exercise all the features of the MCP protocol",
      "env_vars": [],
      "image": "mcp/everything:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:21Z",
        "pulls": 8296,
        "stars": 53720
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "adds",
        "all",
        "attempts",
        "demonstrates",
        "everything",
        "exercise",
        "features",
        "returns",
        "simple",
        "tools"
      ],
      "tools": [
        "echo",
        "add",
        "longRunningOperation",
        "sampleLLM",
        "getTinyImage",
        "printEnv",
        "annotatedMessage"
      ],
      "transport": "stdio"
    },
    "fetch": {
      "args": [],
      "description": "A Model Context Protocol server that provides web content fetching capabilities",
      "env_vars": [],
      "image": "mcp/fetch:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:23Z",
        "pulls": 7998,
        "stars": 53720
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              "github.com"
            ],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": true
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "content",
        "html",
        "markdown",
        "fetch",
        "fetching",
        "get",
        "wget",
        "json",
        "curl",
        "modelcontextprotocol"
      ],
      "tools": [
        "fetch"
      ],
      "transport": "stdio"
    },
    "filesystem": {
      "args": [],
      "description": "Node.js server implementing Model Context Protocol (MCP) for filesystem operations.",
      "env_vars": [],
      "image": "mcp/filesystem:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:18Z",
        "pulls": 11896,
        "stars": 53720
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": false
          }
        },
        "read": [
          "/tmp"
        ],
        "write": [
          "/tmp"
        ]
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "create_directory",
        "edit_file",
        "filesystem",
        "get_file_info",
        "implementing",
        "list_allowed_directories",
        "list_directory",
        "move_file",
        "node",
        "operations"
      ],
      "tools": [
        "read_file",
        "read_multiple_files",
        "write_file",
        "edit_file",
        "create_directory",
        "list_directory",
        "move_file",
        "search_files",
        "get_file_info",
        "list_allowed_directories"
      ],
      "transport": "stdio"
    },
    "firecrawl": {
      "args": [],
      "description": "A powerful web scraping and content extraction MCP server that provides advanced crawling, search, and structured data extraction capabilities with LLM integration.",
      "env_vars": [
        {
          "description": "API key for FireCrawl service authentication",
          "name": "FIRECRAWL_API_KEY",
          "required": true,
          "secret": true
        },
        {
          "description": "FireCrawl API URL (default: https://api.firecrawl.dev/v1)",
          "name": "FIRECRAWL_API_URL",
          "required": false
        },
        {
          "description": "Maximum number of retry attempts for API calls",
          "name": "FIRECRAWL_RETRY_MAX_ATTEMPTS",
          "required": false
        },
        {
          "description": "Initial delay in milliseconds for retry backoff",
          "name": "FIRECRAWL_RETRY_INITIAL_DELAY",
          "required": false
        },
        {
          "description": "Maximum delay in milliseconds for retry backoff",
          "name": "FIRECRAWL_RETRY_MAX_DELAY",
          "required": false
        },
        {
          "description": "Backoff factor for retry delay calculation",
          "name": "FIRECRAWL_RETRY_BACKOFF_FACTOR",
          "required": false
        },
        {
          "description": "Credit threshold for warning notifications",
          "name": "FIRECRAWL_CREDIT_WARNING_THRESHOLD",
          "required": false
        },
        {
          "description": "Credit threshold for critical notifications",
          "name": "FIRECRAWL_CREDIT_CRITICAL_THRESHOLD",
          "required": false
        }
      ],
      "image": "mcp/firecrawl:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:19Z",
        "pulls": 5995,
        "stars": 3428
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": true
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/mendableai/firecrawl-mcp-server",
      "tags": [
        "web-crawler",
        "web-scraping",
        "data-collection",
        "batch-processing",
        "content-extraction",
        "search-api",
        "llm-tools",
        "javascript-rendering",
        "research",
        "automation"
      ],
      "tools": [
        "firecrawl_scrape",
        "firecrawl_batch_scrape",
        "firecrawl_check_batch_status",
        "firecrawl_check_crawl_status",
        "firecrawl_search",
        "firecrawl_crawl",
        "firecrawl_extract",
        "firecrawl_deep_research",
        "firecrawl_generate_llmstxt",
        "firecrawl_map"
      ],
      "transport": "stdio"
    },
    "gdrive": {
      "args": [],
      "description": "This MCP server integrates with Google Drive to allow listing, reading, and searching over files.",
      "env_vars": [
        {
          "description": "Path to the OAuth keys file for Google Drive API authentication",
          "name": "GDRIVE_OAUTH_PATH",
          "required": true
        },
        {
          "description": "Path to save/load Google Drive API credentials",
          "name": "GDRIVE_CREDENTIALS_PATH",
          "required": true
        }
      ],
      "image": "mcp/gdrive:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:22Z",
        "pulls": 5652,
        "stars": 53720
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "drive",
        "files",
        "gdrive",
        "google",
        "integrates",
        "listing",
        "reading",
        "searching",
        "documents",
        "spreadsheets",
        "presentations"
      ],
      "tools": [
        "search"
      ],
      "transport": "stdio"
    },
    "git": {
      "args": [],
      "description": "A Model Context Protocol server for Git repository interaction and automation",
      "env_vars": [],
      "image": "mcp/git:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:22Z",
        "pulls": 5890,
        "stars": 53720
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [],
            "allow_transport": [],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "adds",
        "automation",
        "git",
        "interaction",
        "records",
        "repository",
        "shows",
        "tools",
        "unstages"
      ],
      "tools": [
        "git_status",
        "git_diff_unstaged",
        "git_diff_staged",
        "git_diff",
        "git_commit",
        "git_add",
        "git_reset",
        "git_log",
        "git_create_branch",
        "git_checkout",
        "git_show",
        "git_init"
      ],
      "transport": "stdio"
    },
    "github": {
      "args": [],
      "description": "The GitHub MCP Server provides seamless integration with GitHub APIs, enabling advanced automation and interaction capabilities for developers and tools",
      "env_vars": [
        {
          "description": "GitHub personal access token with appropriate permissions",
          "name": "GITHUB_PERSONAL_ACCESS_TOKEN",
          "required": true,
          "secret": true
        },
        {
          "description": "GitHub Enterprise Server hostname (optional)",
          "name": "GH_HOST",
          "required": false
        }
      ],
      "image": "ghcr.io/github/github-mcp-server:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:21Z",
        "pulls": 5000,
        "stars": 15702
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              "docs.github.com",
              "github.com"
            ],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "provenance": {
        "cert_issuer": "https://token.actions.githubusercontent.com",
        "repository_uri": "https://github.com/github/github-mcp-server",
        "runner_environment": "github-hosted",
        "signer_identity": "/.github/workflows/docker-publish.yml",
        "sigstore_url": "tuf-repo-cdn.sigstore.dev"
      },
      "repository_url": "https://github.com/github/github-mcp-server",
      "tags": [
        "api",
        "create",
        "fork",
        "github",
        "list",
        "pull-request",
        "push",
        "repository",
        "search",
        "update",
        "issues"
      ],
      "tools": [
        "get_me",
        "get_issue",
        "create_issue",
        "add_issue_comment",
        "list_issues",
        "update_issue",
        "search_issues",
        "get_pull_request",
        "list_pull_requests",
        "merge_pull_request",
        "get_pull_request_files",
        "get_pull_request_status",
        "update_pull_request_branch",
        "get_pull_request_comments",
        "get_pull_request_reviews",
        "create_pull_request_review",
        "create_pull_request",
        "create_or_update_file",
        "push_files",
        "search_repositories",
        "create_repository",
        "get_file_contents",
        "fork_repository",
        "create_branch",
        "list_commits",
        "search_code",
        "search_users",
        "get_code_scanning_alert",
        "list_code_scanning_alerts"
      ],
      "transport": "stdio"
    },
    "gitlab": {
      "args": [],
      "description": "MCP Server for the GitLab API, enabling project management, file operations, and more.",
      "env_vars": [
        {
          "description": "GitLab personal access token with appropriate permissions",
          "name": "GITLAB_PERSONAL_ACCESS_TOKEN",
          "required": true,
          "secret": true
        },
        {
          "description": "Base URL for GitLab API (optional, defaults to https://gitlab.com/api/v4)",
          "name": "GITLAB_API_URL",
          "required": false
        }
      ],
      "image": "mcp/gitlab:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:18Z",
        "pulls": 5079,
        "stars": 53720
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              "docs.gitlab.com",
              "gitlab.com",
              "full.com"
            ],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "api",
        "create",
        "file",
        "fork",
        "gitlab",
        "management",
        "merge-request",
        "operations",
        "project",
        "search"
      ],
      "tools": [
        "create_or_update_file",
        "push_files",
        "search_repositories",
        "create_repository",
        "get_file_contents",
        "create_issue",
        "create_merge_request",
        "fork_repository",
        "create_branch"
      ],
      "transport": "stdio"
    },
    "google-maps": {
      "args": [],
      "description": "MCP Server for the Google Maps API.",
      "env_vars": [
        {
          "description": "Google Maps API key with appropriate permissions",
          "name": "GOOGLE_MAPS_API_KEY",
          "required": true,
          "secret": true
        }
      ],
      "image": "mcp/google-maps:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:21Z",
        "pulls": 4126,
        "stars": 53720
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              "developers.google.com",
              "maps.com"
            ],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "api",
        "directions",
        "distance",
        "geocode",
        "google",
        "google-maps",
        "maps",
        "places",
        "search"
      ],
      "tools": [
        "maps_geocode",
        "maps_reverse_geocode",
        "maps_search_places",
        "maps_place_details",
        "maps_distance_matrix",
        "maps_elevation",
        "maps_directions"
      ],
      "transport": "stdio"
    },
    "grafana": {
      "args": [],
      "description": "A Model Context Protocol (MCP) server for Grafana that provides access to your Grafana instance and the surrounding ecosystem, enabling dashboard search, datasource queries, alerting management, incident response, and Sift investigations.",
      "env_vars": [
        {
          "description": "URL of the Grafana instance to connect to",
          "name": "GRAFANA_URL",
          "required": true
        },
        {
          "description": "Service account token with appropriate permissions",
          "name": "GRAFANA_API_KEY",
          "required": true,
          "secret": true
        }
      ],
      "image": "mcp/grafana:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:22Z",
        "pulls": 3850,
        "stars": 935
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": true
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/grafana/mcp-grafana",
      "tags": [
        "grafana",
        "dashboards",
        "visualization",
        "monitoring",
        "alerting",
        "prometheus",
        "loki",
        "tempo",
        "pyroscope",
        "incidents",
        "observability",
        "metrics",
        "logs",
        "traces",
        "sift",
        "investigations",
        "oncall"
      ],
      "tools": [
        "list_teams",
        "search_dashboards",
        "get_dashboard_by_uid",
        "update_dashboard",
        "get_dashboard_panel_queries",
        "list_datasources",
        "get_datasource_by_uid",
        "get_datasource_by_name",
        "query_prometheus",
        "list_prometheus_metric_metadata",
        "list_prometheus_metric_names",
        "list_prometheus_label_names",
        "list_prometheus_label_values",
        "list_incidents",
        "create_incident",
        "add_activity_to_incident",
        "resolve_incident",
        "query_loki_logs",
        "list_loki_label_names",
        "list_loki_label_values",
        "query_loki_stats",
        "list_alert_rules",
        "get_alert_rule_by_uid",
        "list_oncall_schedules",
        "get_oncall_shift",
        "get_current_oncall_users",
        "list_oncall_teams",
        "list_oncall_users",
        "get_investigation",
        "get_analysis",
        "list_investigations",
        "find_error_pattern_logs",
        "find_slow_requests"
      ],
      "transport": "stdio"
    },
    "hass-mcp": {
      "args": [],
      "description": "A Model Context Protocol (MCP) server for Home Assistant integration with Claude and other LLMs, enabling direct interaction with smart home devices, sensors, and automations.",
      "env_vars": [
        {
          "description": "Home Assistant instance URL (e.g. http://homeassistant.local:8123)",
          "name": "HA_URL",
          "required": true
        },
        {
          "description": "Home Assistant Long-Lived Access Token",
          "name": "HA_TOKEN",
          "required": true,
          "secret": true
        }
      ],
      "image": "voska/hass-mcp:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:17Z",
        "pulls": 8030,
        "stars": 104
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": true
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/voska/hass-mcp",
      "tags": [
        "home-assistant",
        "smart-home",
        "automation",
        "iot",
        "sensors",
        "devices",
        "control",
        "monitoring",
        "home-automation",
        "domotics"
      ],
      "tools": [
        "get_version",
        "get_entity",
        "entity_action",
        "list_entities",
        "search_entities_tool",
        "domain_summary_tool",
        "list_automations",
        "call_service_tool",
        "restart_ha",
        "get_history",
        "get_error_log"
      ],
      "transport": "stdio"
    },
    "k8s": {
      "args": [],
      "description": "MKP is a Model Context Protocol (MCP) server for Kubernetes that allows LLM-powered applications to interact with Kubernetes clusters.",
      "env_vars": [
        {
          "description": "Path to the kubeconfig file for Kubernetes API authentication (mounted into the container with --volume)",
          "name": "KUBECONFIG",
          "required": false
        }
      ],
      "image": "ghcr.io/stackloklabs/mkp/server:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:21Z",
        "pulls": 6144,
        "stars": 31
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": true
          }
        },
        "read": [],
        "write": []
      },
      "provenance": {
        "cert_issuer": "https://token.actions.githubusercontent.com",
        "repository_uri": "https://github.com/StacklokLabs/mkp",
        "runner_environment": "github-hosted",
        "signer_identity": "/.github/workflows/release.yml",
        "sigstore_url": "tuf-repo-cdn.sigstore.dev"
      },
      "repository_url": "https://github.com/StacklokLabs/mkp",
      "tags": [
        "kubernetes",
        "k8s",
        "api",
        "resources",
        "cluster",
        "namespaced",
        "apply",
        "get",
        "list"
      ],
      "tools": [
        "list_resources",
        "get_resource",
        "apply_resource"
      ],
      "transport": "sse"
    },
    "memory": {
      "args": [],
      "description": "A basic implementation of persistent memory using a local knowledge graph. This lets Claude remember information about the user across chats.",
      "env_vars": [
        {
          "description": "Path to the memory storage JSON file (default: memory.json in the server directory)",
          "name": "MEMORY_FILE_PATH",
          "required": false
        }
      ],
      "image": "mcp/memory:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:20Z",
        "pulls": 8839,
        "stars": 53720
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "entities",
        "graph",
        "knowledge",
        "memory",
        "observations",
        "persistent",
        "relations"
      ],
      "tools": [
        "create_entities",
        "create_relations",
        "add_observations",
        "delete_entities",
        "delete_observations",
        "delete_relations",
        "read_graph",
        "search_nodes",
        "open_nodes"
      ],
      "transport": "stdio"
    },
    "netbird": {
      "args": [
        "--transport",
        "sse",
        "--sse-address",
        ":8001"
      ],
      "description": "A Model Context Protocol server for NetBird, enabling management of your NetBird network.",
      "env_vars": [
        {
          "description": "NetBird API token for authentication",
          "name": "NETBIRD_API_TOKEN",
          "required": true,
          "secret": true
        },
        {
          "description": "NetBird API host (default is api.netbird.io)",
          "name": "NETBIRD_HOST",
          "required": false
        }
      ],
      "image": "aantti/mcp-netbird:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:18Z",
        "pulls": 5170,
        "stars": 33
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": true
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/aantti/mcp-netbird",
      "tags": [
        "netbird",
        "vpn",
        "networking",
        "peer",
        "route",
        "dns",
        "setup-key",
        "management"
      ],
      "target_port": 8001,
      "tools": [
        "list_netbird_peers",
        "list_netbird_port_allocations",
        "list_netbird_groups",
        "list_netbird_policies",
        "list_netbird_posture_checks",
        "list_netbird_networks",
        "list_netbird_nameservers"
      ],
      "transport": "sse"
    },
    "oci-registry": {
      "args": [],
      "description": "The OCI Registry MCP Server enables secure and seamless querying of OCI container registries, providing tools for image introspection, tag discovery, and manifest/config retrieval.",
      "env_vars": [
        {
          "description": "Bearer token for OCI registry authentication",
          "name": "OCI_TOKEN",
          "required": false,
          "secret": true
        },
        {
          "description": "Username for registry authentication",
          "name": "OCI_USERNAME",
          "required": false
        },
        {
          "description": "Password for registry authentication",
          "name": "OCI_PASSWORD",
          "required": false,
          "secret": true
        }
      ],
      "image": "ghcr.io/stackloklabs/ocireg-mcp/server:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:18Z",
        "pulls": 1990,
        "stars": 2
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              "*"
            ],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "provenance": {
        "cert_issuer": "https://token.actions.githubusercontent.com",
        "repository_uri": "https://github.com/StacklokLabs/ocireg-mcp",
        "runner_environment": "github-hosted",
        "signer_identity": "/.github/workflows/release.yml",
        "sigstore_url": "tuf-repo-cdn.sigstore.dev"
      },
      "repository_url": "https://github.com/StacklokLabs/ocireg-mcp",
      "tags": [
        "oci",
        "registry",
        "containers",
        "images",
        "tags",
        "manifest",
        "config",
        "mcp",
        "docker"
      ],
      "tools": [
        "get_image_info",
        "list_tags",
        "get_image_manifest",
        "get_image_config"
      ],
      "transport": "sse"
    },
    "osv": {
      "args": [],
      "description": "An MCP (Model Context Protocol) server that provides access to the OSV (Open Source Vulnerabilities) database. This server allows LLM-powered applications to query the OSV database for vulnerability information about packages and commits.",
      "env_vars": [],
      "image": "ghcr.io/stackloklabs/osv-mcp/server:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:19Z",
        "pulls": 4584,
        "stars": 5
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              "api.osv.dev"
            ],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "provenance": {
        "cert_issuer": "https://token.actions.githubusercontent.com",
        "repository_uri": "https://github.com/StacklokLabs/osv-mcp",
        "runner_environment": "github-hosted",
        "signer_identity": "/.github/workflows/release.yml",
        "sigstore_url": "tuf-repo-cdn.sigstore.dev"
      },
      "repository_url": "https://github.com/StacklokLabs/osv-mcp",
      "tags": [
        "vulnerability",
        "security",
        "osv",
        "open-source",
        "cve",
        "packages",
        "dependencies",
        "scanning",
        "security-scanning",
        "vulnerability-detection"
      ],
      "tools": [
        "query_vulnerability",
        "query_vulnerabilities_batch",
        "get_vulnerability"
      ],
      "transport": "sse"
    },
    "perplexity-ask": {
      "args": [],
      "description": "",
      "env_vars": [
        {
          "description": "Perplexity API key",
          "name": "PERPLEXITY_API_KEY",
          "required": true,
          "secret": true
        }
      ],
      "image": "mcp/perplexity-ask:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:17Z",
        "pulls": 7376,
        "stars": 53720
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              "api.perplexity.ai"
            ],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "ask",
        "perplexity",
        "perplexity-ask"
      ],
      "tools": [],
      "transport": "stdio"
    },
    "postgres": {
      "args": [
        "postgresql://host:port/db-name"
      ],
      "description": "A Model Context Protocol server that provides read-only access to PostgreSQL databases. This server enables LLMs to inspect database schemas and execute read-only queries.",
      "env_vars": [],
      "image": "mcp/postgres:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:20Z",
        "pulls": 10876,
        "stars": 53720
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": false
          }
        },
        "read": [
          "/tmp/db"
        ],
        "write": [
          "/tmp/db"
        ]
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "database",
        "postgres",
        "postgresql",
        "query",
        "read-only",
        "schema",
        "sql"
      ],
      "tools": [
        "query"
      ],
      "transport": "stdio"
    },
    "puppeteer": {
      "args": [],
      "description": "A Model Context Protocol server that provides browser automation capabilities using Puppeteer",
      "env_vars": [
        {
          "default": "true",
          "description": "Set to true when running in Docker to use headless mode",
          "name": "DOCKER_CONTAINER",
          "required": false
        }
      ],
      "image": "mcp/puppeteer:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:22Z",
        "pulls": 14475,
        "stars": 53720
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": true
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "automation",
        "browser",
        "capabilities",
        "navigate",
        "provides",
        "puppeteer",
        "puppeteer_click",
        "puppeteer_evaluate",
        "puppeteer_fill",
        "puppeteer_hover"
      ],
      "tools": [
        "puppeteer_navigate",
        "puppeteer_screenshot",
        "puppeteer_click",
        "puppeteer_hover",
        "puppeteer_fill",
        "puppeteer_select",
        "puppeteer_evaluate"
      ],
      "transport": "stdio"
    },
    "redis": {
      "args": [],
      "description": "A Model Context Protocol server that provides access to Redis databases. This server enables LLMs to interact with Redis key-value stores through a set of standardized tools.",
      "env_vars": [],
      "image": "mcp/redis:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:21Z",
        "pulls": 5096,
        "stars": 53720
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443,
              6379
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "redis",
        "database",
        "key-value",
        "storage",
        "cache",
        "data"
      ],
      "tools": [
        "set",
        "get",
        "delete",
        "list"
      ],
      "transport": "stdio"
    },
    "semgrep": {
      "args": [],
      "description": "An MCP server for using Semgrep to scan code for security vulnerabilities. Semgrep is a fast, deterministic static analysis tool that semantically understands many languages and comes with over 5,000 rules.",
      "env_vars": [
        {
          "description": "Token for connecting to Semgrep AppSec Platform",
          "name": "SEMGREP_APP_TOKEN",
          "required": false,
          "secret": true
        }
      ],
      "image": "ghcr.io/semgrep/mcp:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:19Z",
        "pulls": 5775,
        "stars": 192
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              "semgrep.dev",
              "semgrep.com"
            ],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/semgrep/mcp",
      "tags": [
        "security",
        "static-analysis",
        "code-scanning",
        "vulnerability-detection",
        "sast",
        "code-quality",
        "security-scanning",
        "semgrep",
        "ast",
        "code-analysis"
      ],
      "tools": [
        "security_check",
        "semgrep_scan",
        "semgrep_scan_with_custom_rule",
        "get_abstract_syntax_tree",
        "supported_languages",
        "semgrep_rule_schema",
        "write_custom_semgrep_rule"
      ],
      "transport": "sse"
    },
    "sentry": {
      "args": [],
      "description": "A Model Context Protocol server for retrieving and analyzing issues from Sentry.io",
      "env_vars": [
        {
          "description": "Sentry authentication token for API access",
          "name": "SENTRY_TOKEN",
          "required": true,
          "secret": true
        }
      ],
      "image": "mcp/sentry:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:20Z",
        "pulls": 7367,
        "stars": 53720
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "analyzing",
        "issues",
        "retrieving",
        "sentry",
        "tools"
      ],
      "tools": [
        "get_sentry_issue"
      ],
      "transport": "stdio"
    },
    "sequentialthinking": {
      "args": [],
      "description": "MCP server enabling dynamic problem-solving with a structured, reflective approach that can adapt and evolve as understanding deepens.",
      "env_vars": [],
      "image": "mcp/sequentialthinking:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:20Z",
        "pulls": 9146,
        "stars": 53720
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "approach",
        "dynamic",
        "enabling",
        "problem",
        "reflective",
        "sequentialthinking",
        "solving",
        "structured",
        "step-by-step",
        "revision",
        "branching",
        "chain-of-thought"
      ],
      "tools": [
        "sequentialthinking"
      ],
      "transport": "stdio"
    },
    "slack": {
      "args": [],
      "description": "MCP Server for the Slack API, enabling Claude to interact with Slack workspaces",
      "env_vars": [
        {
          "description": "Bot User OAuth Token that starts with xoxb-",
          "name": "SLACK_BOT_TOKEN",
          "required": true,
          "secret": true
        },
        {
          "description": "Slack Team ID that starts with T",
          "name": "SLACK_TEAM_ID",
          "required": true
        }
      ],
      "image": "mcp/slack:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:20Z",
        "pulls": 4807,
        "stars": 53720
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [
              "api.slack.com",
              "slack.com"
            ],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "api",
        "claude",
        "enabling",
        "interact",
        "list",
        "post",
        "reply",
        "slack",
        "tools",
        "workspaces"
      ],
      "tools": [
        "slack_list_channels",
        "slack_post_message",
        "slack_reply_to_thread",
        "slack_add_reaction",
        "slack_get_channel_history",
        "slack_get_thread_replies",
        "slack_get_users",
        "slack_get_user_profile"
      ],
      "transport": "stdio"
    },
    "sqlite": {
      "args": [],
      "description": "MCP server with SQLite for SQL queries, data analysis, and auto-generated business insights.",
      "env_vars": [],
      "image": "mcp/sqlite:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:19Z",
        "pulls": 8034,
        "stars": 53720
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "analysis",
        "auto",
        "business",
        "data",
        "generated",
        "insights",
        "queries",
        "sql",
        "sqlite",
        "tools"
      ],
      "tools": [
        "read_query",
        "write_query",
        "create_table",
        "list_tables",
        "describe_table",
        "append_insight"
      ],
      "transport": "stdio"
    },
    "terraform": {
      "args": [],
      "description": "MCP Server for providing seamless integration with Terraform ecosystem and interaction capabilities for Infrastructure as Code (IaC) development.",
      "env_vars": [],
      "image": "hashicorp/terraform-mcp-server:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:18Z",
        "pulls": 1792,
        "stars": 597
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": true
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/hashicorp/terraform-mcp-server",
      "tags": [
        "terraform",
        "iac",
        "infrastructure",
        "automation",
        "providers",
        "modules",
        "hcl",
        "plan",
        "apply",
        "destroy",
        "aws",
        "gcp",
        "azure"
      ],
      "tools": [
        "resolveProviderDocID",
        "getProviderDocs",
        "searchModules",
        "moduleDetails"
      ],
      "transport": "stdio"
    },
    "time": {
      "args": [],
      "description": "MCP server for time info and IANA timezone conversions with auto system timezone detection.",
      "env_vars": [],
      "image": "mcp/time:latest",
      "metadata": {
        "last_updated": "2025-06-15T00:31:22Z",
        "pulls": 6045,
        "stars": 53720
      },
      "permissions": {
        "network": {
          "outbound": {
            "allow_host": [],
            "allow_port": [
              443
            ],
            "allow_transport": [
              "tcp"
            ],
            "insecure_allow_all": false
          }
        },
        "read": [],
        "write": []
      },
      "repository_url": "https://github.com/modelcontextprotocol/servers",
      "tags": [
        "auto",
        "available",
        "configuration",
        "conversions",
        "convert_time",
        "customization",
        "details",
        "detection",
        "example",
        "examples"
      ],
      "tools": [
        "get_current_time",
        "convert_time"
      ],
      "transport": "stdio"
    }
  },
  "version": "1.0.0"
}